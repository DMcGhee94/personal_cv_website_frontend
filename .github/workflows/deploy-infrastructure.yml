# This is a basic workflow to help you get started with Actions

name: Deploy-Infrastructure

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: 'personal-cv-website'
  PRIMARY_DEPLOYMENT_REGION: 'uksouth'
  WEBSITE_DOMAIN: 'darren-mcghee.com'
  PREFIX: 'dmcv'

# Controls when the workflow will run
on:
  workflow_dispatch:

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - name: 'Checkout Repo'
              uses: actions/checkout@v3

            - name: 'Azure CLI Login via OIDC'
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: 'Define current date time'
              run: |
                current_date_time=$(date -u +"%Y%m%d-%H%M%S")
                echo "UTC_NOW=$current_date_time" >> $GITHUB_ENV
          
            - name: 'Create resource group'
              run: |
                if [ $(az group exists --name ${{ env.RESOURCE_GROUP }}) = false ]; then
                  az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.PRIMARY_DEPLOYMENT_REGION }}
                fi

            - name: 'Deploy Storage Account'
              run: |
                az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} --name deploy-website-storage-${{ env.UTC_NOW }} --template-file ./bicep-scripts/storageAccount.bicep --parameters ./bicep-scripts/parameters/storageAccount.bicepparam -p namePrefix=${{ env.PREFIX }}
                
                storageAccName=$(az deployment group show -g ${{ env.RESOURCE_GROUP }} -n deploy-website-storage-${{ env.UTC_NOW }} --query properties.outputs.storageAccountName.value | tr -d \")
                echo "STORAGE_ACCOUNT_NAME=$storageAccName" >> $GITHUB_ENV

                websiteEndpoint=$(az deployment group show -g ${{ env.RESOURCE_GROUP }} -n deploy-website-storage-${{ env.UTC_NOW }} --query properties.outputs.websiteEndpoint.value | tr -d \" | sed 's/^https:\/\///' | sed 's/\/$//')
                echo "WEBSITE_ENDPOINT=$websiteEndpoint" >> $GITHUB_ENV

            - name: 'Update Storage Account Properties'
              run: |
                az storage blob service-properties update --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --static-website true --index-document index.html --404-document 404.html 
                az storage blob upload-batch -s ./website -d '$web' --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --overwrite true --content-cache "max-age=100"

            - name: 'Deploy the FrontDoor and DNS Zone'
              run: |
                az deployment group create --resource-group ${{ env.RESOURCE_GROUP }} -n deploy-website-frontdoor-${{ env.UTC_NOW }} --template-file ./bicep-scripts/frontDoor.bicep --parameters ./bicep-scripts/parameters/frontDoor.bicepparam -p originHostName=${{ env.WEBSITE_ENDPOINT }} -p dnsZoneName=${{ env.WEBSITE_DOMAIN }} -p endpointPrefix=${{ env.PREFIX }}

                profileName=$(az deployment group show -g ${{ env.RESOURCE_GROUP }} -n deploy-website-frontdoor-${{ env.UTC_NOW }} --query properties.outputs.profileName.value | tr -d \" | tr -d \")
                echo "PROFILE_NAME=$profileName" >> $GITHUB_ENV

                endpointName=$(az deployment group show -g ${{ env.RESOURCE_GROUP }} -n deploy-website-frontdoor-${{ env.UTC_NOW }} --query properties.outputs.endpointName.value | tr -d \" | tr -d \")
                echo "ENDPOINT_NAME=$endpointName" >> $GITHUB_ENV

                endpointDoman=$(az deployment group show -g ${{ env.RESOURCE_GROUP }} -n deploy-website-frontdoor-${{ env.UTC_NOW }} --query properties.outputs.endpointDoman.value | tr -d \" | tr -d \")
                echo "ENDPOINT_DOMAIN=$endpointDoman" >> $GITHUB_ENV

            - name: 'Purge Front Door cache'
              run: |
                az afd endpoint purge --resource-group ${{ env.RESOURCE_GROUP }} --profile-name ${{ env.PROFILE_NAME }} --endpoint-name ${{ env.ENDPOINT_NAME }} --domains ${{ env.ENDPOINT_DOMAIN }} --content-paths '/*'